// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "trainstation/v1alpha1/station.proto" (package "trainstation.v1alpha1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StationAPI } from "./station";
import type { SetFavoriteOneStationResponse } from "./station";
import type { SetFavoriteOneStationRequest } from "./station";
import type { GetOneStationResponse } from "./station";
import type { GetOneStationRequest } from "./station";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetManyStationsResponse } from "./station";
import type { GetManyStationsRequest } from "./station";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * StationAPI handles train stations from the SNCF.
 *
 * The API needs the user to be authenticated via the AuthAPI.
 *
 * @generated from protobuf service trainstation.v1alpha1.StationAPI
 */
export interface IStationAPIClient {
    /**
     * GetManyStations fetch a paginated list of station.
     *
     * @generated from protobuf rpc: GetManyStations(trainstation.v1alpha1.GetManyStationsRequest) returns (trainstation.v1alpha1.GetManyStationsResponse);
     */
    getManyStations(input: GetManyStationsRequest, options?: RpcOptions): UnaryCall<GetManyStationsRequest, GetManyStationsResponse>;
    /**
     * GetOneStation fetches the details of a station.
     *
     * @generated from protobuf rpc: GetOneStation(trainstation.v1alpha1.GetOneStationRequest) returns (trainstation.v1alpha1.GetOneStationResponse);
     */
    getOneStation(input: GetOneStationRequest, options?: RpcOptions): UnaryCall<GetOneStationRequest, GetOneStationResponse>;
    /**
     * SetFavoriteOneStation set a station to favorite for a user.
     *
     * @generated from protobuf rpc: SetFavoriteOneStation(trainstation.v1alpha1.SetFavoriteOneStationRequest) returns (trainstation.v1alpha1.SetFavoriteOneStationResponse);
     */
    setFavoriteOneStation(input: SetFavoriteOneStationRequest, options?: RpcOptions): UnaryCall<SetFavoriteOneStationRequest, SetFavoriteOneStationResponse>;
}
/**
 * StationAPI handles train stations from the SNCF.
 *
 * The API needs the user to be authenticated via the AuthAPI.
 *
 * @generated from protobuf service trainstation.v1alpha1.StationAPI
 */
export class StationAPIClient implements IStationAPIClient, ServiceInfo {
    typeName = StationAPI.typeName;
    methods = StationAPI.methods;
    options = StationAPI.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GetManyStations fetch a paginated list of station.
     *
     * @generated from protobuf rpc: GetManyStations(trainstation.v1alpha1.GetManyStationsRequest) returns (trainstation.v1alpha1.GetManyStationsResponse);
     */
    getManyStations(input: GetManyStationsRequest, options?: RpcOptions): UnaryCall<GetManyStationsRequest, GetManyStationsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetManyStationsRequest, GetManyStationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetOneStation fetches the details of a station.
     *
     * @generated from protobuf rpc: GetOneStation(trainstation.v1alpha1.GetOneStationRequest) returns (trainstation.v1alpha1.GetOneStationResponse);
     */
    getOneStation(input: GetOneStationRequest, options?: RpcOptions): UnaryCall<GetOneStationRequest, GetOneStationResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOneStationRequest, GetOneStationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetFavoriteOneStation set a station to favorite for a user.
     *
     * @generated from protobuf rpc: SetFavoriteOneStation(trainstation.v1alpha1.SetFavoriteOneStationRequest) returns (trainstation.v1alpha1.SetFavoriteOneStationResponse);
     */
    setFavoriteOneStation(input: SetFavoriteOneStationRequest, options?: RpcOptions): UnaryCall<SetFavoriteOneStationRequest, SetFavoriteOneStationResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetFavoriteOneStationRequest, SetFavoriteOneStationResponse>("unary", this._transport, method, opt, input);
    }
}
