// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package db

import (
	"context"
)

const countFavorites = `-- name: CountFavorites :one
SELECT count(*) FROM favorites
`

func (q *Queries) CountFavorites(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFavorites)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countStations = `-- name: CountStations :one
SELECT count(*) FROM stations WHERE libelle LIKE '%'||?1||'%' OR ?1 = ''
`

func (q *Queries) CountStations(ctx context.Context, search string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countStations, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFavorite = `-- name: CreateFavorite :exec
INSERT INTO favorites (
  station_id,
  user_id
) VALUES (
  ?,
  ?
)
`

type CreateFavoriteParams struct {
	StationID string
	UserID    string
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, createFavorite, arg.StationID, arg.UserID)
	return err
}

const createStation = `-- name: CreateStation :exec
INSERT INTO stations (
  id,
  commune,
  y_wgs84,
  x_wgs84,
  libelle,
  idgaia,
  voyageurs,
  geo_point_2d,
  code_ligne,
  x_l93,
  c_geo,
  rg_troncon,
  geo_shape,
  pk,
  idreseau,
  departemen,
  y_l93,
  fret
) VALUES (
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?
)
`

type CreateStationParams struct {
	ID         string
	Commune    string
	YWgs84     float64
	XWgs84     float64
	Libelle    string
	Idgaia     string
	Voyageurs  string
	GeoPoint2d string
	CodeLigne  string
	XL93       float64
	CGeo       string
	RgTroncon  int64
	GeoShape   string
	Pk         string
	Idreseau   int64
	Departemen string
	YL93       float64
	Fret       string
}

func (q *Queries) CreateStation(ctx context.Context, arg CreateStationParams) error {
	_, err := q.db.ExecContext(ctx, createStation,
		arg.ID,
		arg.Commune,
		arg.YWgs84,
		arg.XWgs84,
		arg.Libelle,
		arg.Idgaia,
		arg.Voyageurs,
		arg.GeoPoint2d,
		arg.CodeLigne,
		arg.XL93,
		arg.CGeo,
		arg.RgTroncon,
		arg.GeoShape,
		arg.Pk,
		arg.Idreseau,
		arg.Departemen,
		arg.YL93,
		arg.Fret,
	)
	return err
}

const deleteAllFavorites = `-- name: DeleteAllFavorites :exec
DELETE FROM favorites
`

func (q *Queries) DeleteAllFavorites(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllFavorites)
	return err
}

const deleteAllStations = `-- name: DeleteAllStations :exec
DELETE FROM stations
`

func (q *Queries) DeleteAllStations(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllStations)
	return err
}

const deleteFavorite = `-- name: DeleteFavorite :exec
DELETE FROM favorites WHERE station_id = ? AND user_id = ?
`

type DeleteFavoriteParams struct {
	StationID string
	UserID    string
}

func (q *Queries) DeleteFavorite(ctx context.Context, arg DeleteFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, deleteFavorite, arg.StationID, arg.UserID)
	return err
}

const findManyStationAndFavorite = `-- name: FindManyStationAndFavorite :many
SELECT stations.id, stations.commune, stations.y_wgs84, stations.x_wgs84, stations.libelle, stations.idgaia, stations.voyageurs, stations.geo_point_2d, stations.code_ligne, stations.x_l93, stations.c_geo, stations.rg_troncon, stations.geo_shape, stations.pk, stations.idreseau, stations.departemen, stations.y_l93, stations.fret, CAST(favorites.user_id IS NOT NULL AS BOOL) AS favorite
FROM stations
LEFT OUTER JOIN favorites on favorites.station_id = stations.id AND favorites.user_id = ?1
WHERE libelle LIKE '%'||?2||'%' OR ?2 = ''
ORDER BY libelle
LIMIT ?4
OFFSET (?3 - 1) * ?4
`

type FindManyStationAndFavoriteParams struct {
	UserID string
	Search string
	Page   interface{}
	Limit  int64
}

type FindManyStationAndFavoriteRow struct {
	Station  Station
	Favorite bool
}

func (q *Queries) FindManyStationAndFavorite(ctx context.Context, arg FindManyStationAndFavoriteParams) ([]FindManyStationAndFavoriteRow, error) {
	rows, err := q.db.QueryContext(ctx, findManyStationAndFavorite,
		arg.UserID,
		arg.Search,
		arg.Page,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindManyStationAndFavoriteRow
	for rows.Next() {
		var i FindManyStationAndFavoriteRow
		if err := rows.Scan(
			&i.Station.ID,
			&i.Station.Commune,
			&i.Station.YWgs84,
			&i.Station.XWgs84,
			&i.Station.Libelle,
			&i.Station.Idgaia,
			&i.Station.Voyageurs,
			&i.Station.GeoPoint2d,
			&i.Station.CodeLigne,
			&i.Station.XL93,
			&i.Station.CGeo,
			&i.Station.RgTroncon,
			&i.Station.GeoShape,
			&i.Station.Pk,
			&i.Station.Idreseau,
			&i.Station.Departemen,
			&i.Station.YL93,
			&i.Station.Fret,
			&i.Favorite,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOneStationAndFavorite = `-- name: FindOneStationAndFavorite :one
SELECT stations.id, stations.commune, stations.y_wgs84, stations.x_wgs84, stations.libelle, stations.idgaia, stations.voyageurs, stations.geo_point_2d, stations.code_ligne, stations.x_l93, stations.c_geo, stations.rg_troncon, stations.geo_shape, stations.pk, stations.idreseau, stations.departemen, stations.y_l93, stations.fret, CAST(favorites.user_id IS NOT NULL AS BOOL) AS favorite
FROM stations
LEFT OUTER JOIN favorites on favorites.station_id = stations.id AND favorites.user_id = ?1
WHERE id = ?2
LIMIT 1
`

type FindOneStationAndFavoriteParams struct {
	UserID string
	ID     string
}

type FindOneStationAndFavoriteRow struct {
	Station  Station
	Favorite bool
}

func (q *Queries) FindOneStationAndFavorite(ctx context.Context, arg FindOneStationAndFavoriteParams) (FindOneStationAndFavoriteRow, error) {
	row := q.db.QueryRowContext(ctx, findOneStationAndFavorite, arg.UserID, arg.ID)
	var i FindOneStationAndFavoriteRow
	err := row.Scan(
		&i.Station.ID,
		&i.Station.Commune,
		&i.Station.YWgs84,
		&i.Station.XWgs84,
		&i.Station.Libelle,
		&i.Station.Idgaia,
		&i.Station.Voyageurs,
		&i.Station.GeoPoint2d,
		&i.Station.CodeLigne,
		&i.Station.XL93,
		&i.Station.CGeo,
		&i.Station.RgTroncon,
		&i.Station.GeoShape,
		&i.Station.Pk,
		&i.Station.Idreseau,
		&i.Station.Departemen,
		&i.Station.YL93,
		&i.Station.Fret,
		&i.Favorite,
	)
	return i, err
}
