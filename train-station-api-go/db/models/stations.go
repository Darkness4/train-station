// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Station is an object representing the database table.
type Station struct {
	ID         string  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Commune    string  `boil:"commune" json:"commune" toml:"commune" yaml:"commune"`
	YWGS84     float64 `boil:"y_wgs84" json:"y_wgs84" toml:"y_wgs84" yaml:"y_wgs84"`
	XWGS84     float64 `boil:"x_wgs84" json:"x_wgs84" toml:"x_wgs84" yaml:"x_wgs84"`
	Libelle    string  `boil:"libelle" json:"libelle" toml:"libelle" yaml:"libelle"`
	Idgaia     string  `boil:"idgaia" json:"idgaia" toml:"idgaia" yaml:"idgaia"`
	Voyageurs  string  `boil:"voyageurs" json:"voyageurs" toml:"voyageurs" yaml:"voyageurs"`
	GeoPoint2D string  `boil:"geo_point_2d" json:"geo_point_2d" toml:"geo_point_2d" yaml:"geo_point_2d"`
	CodeLigne  string  `boil:"code_ligne" json:"code_ligne" toml:"code_ligne" yaml:"code_ligne"`
	XL93       float64 `boil:"x_l93" json:"x_l93" toml:"x_l93" yaml:"x_l93"`
	CGeo       string  `boil:"c_geo" json:"c_geo" toml:"c_geo" yaml:"c_geo"`
	RGTroncon  int64   `boil:"rg_troncon" json:"rg_troncon" toml:"rg_troncon" yaml:"rg_troncon"`
	GeoShape   string  `boil:"geo_shape" json:"geo_shape" toml:"geo_shape" yaml:"geo_shape"`
	PK         string  `boil:"pk" json:"pk" toml:"pk" yaml:"pk"`
	Idreseau   int64   `boil:"idreseau" json:"idreseau" toml:"idreseau" yaml:"idreseau"`
	Departemen string  `boil:"departemen" json:"departemen" toml:"departemen" yaml:"departemen"`
	YL93       float64 `boil:"y_l93" json:"y_l93" toml:"y_l93" yaml:"y_l93"`
	Fret       string  `boil:"fret" json:"fret" toml:"fret" yaml:"fret"`

	R *stationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StationColumns = struct {
	ID         string
	Commune    string
	YWGS84     string
	XWGS84     string
	Libelle    string
	Idgaia     string
	Voyageurs  string
	GeoPoint2D string
	CodeLigne  string
	XL93       string
	CGeo       string
	RGTroncon  string
	GeoShape   string
	PK         string
	Idreseau   string
	Departemen string
	YL93       string
	Fret       string
}{
	ID:         "id",
	Commune:    "commune",
	YWGS84:     "y_wgs84",
	XWGS84:     "x_wgs84",
	Libelle:    "libelle",
	Idgaia:     "idgaia",
	Voyageurs:  "voyageurs",
	GeoPoint2D: "geo_point_2d",
	CodeLigne:  "code_ligne",
	XL93:       "x_l93",
	CGeo:       "c_geo",
	RGTroncon:  "rg_troncon",
	GeoShape:   "geo_shape",
	PK:         "pk",
	Idreseau:   "idreseau",
	Departemen: "departemen",
	YL93:       "y_l93",
	Fret:       "fret",
}

var StationTableColumns = struct {
	ID         string
	Commune    string
	YWGS84     string
	XWGS84     string
	Libelle    string
	Idgaia     string
	Voyageurs  string
	GeoPoint2D string
	CodeLigne  string
	XL93       string
	CGeo       string
	RGTroncon  string
	GeoShape   string
	PK         string
	Idreseau   string
	Departemen string
	YL93       string
	Fret       string
}{
	ID:         "stations.id",
	Commune:    "stations.commune",
	YWGS84:     "stations.y_wgs84",
	XWGS84:     "stations.x_wgs84",
	Libelle:    "stations.libelle",
	Idgaia:     "stations.idgaia",
	Voyageurs:  "stations.voyageurs",
	GeoPoint2D: "stations.geo_point_2d",
	CodeLigne:  "stations.code_ligne",
	XL93:       "stations.x_l93",
	CGeo:       "stations.c_geo",
	RGTroncon:  "stations.rg_troncon",
	GeoShape:   "stations.geo_shape",
	PK:         "stations.pk",
	Idreseau:   "stations.idreseau",
	Departemen: "stations.departemen",
	YL93:       "stations.y_l93",
	Fret:       "stations.fret",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var StationWhere = struct {
	ID         whereHelperstring
	Commune    whereHelperstring
	YWGS84     whereHelperfloat64
	XWGS84     whereHelperfloat64
	Libelle    whereHelperstring
	Idgaia     whereHelperstring
	Voyageurs  whereHelperstring
	GeoPoint2D whereHelperstring
	CodeLigne  whereHelperstring
	XL93       whereHelperfloat64
	CGeo       whereHelperstring
	RGTroncon  whereHelperint64
	GeoShape   whereHelperstring
	PK         whereHelperstring
	Idreseau   whereHelperint64
	Departemen whereHelperstring
	YL93       whereHelperfloat64
	Fret       whereHelperstring
}{
	ID:         whereHelperstring{field: "\"stations\".\"id\""},
	Commune:    whereHelperstring{field: "\"stations\".\"commune\""},
	YWGS84:     whereHelperfloat64{field: "\"stations\".\"y_wgs84\""},
	XWGS84:     whereHelperfloat64{field: "\"stations\".\"x_wgs84\""},
	Libelle:    whereHelperstring{field: "\"stations\".\"libelle\""},
	Idgaia:     whereHelperstring{field: "\"stations\".\"idgaia\""},
	Voyageurs:  whereHelperstring{field: "\"stations\".\"voyageurs\""},
	GeoPoint2D: whereHelperstring{field: "\"stations\".\"geo_point_2d\""},
	CodeLigne:  whereHelperstring{field: "\"stations\".\"code_ligne\""},
	XL93:       whereHelperfloat64{field: "\"stations\".\"x_l93\""},
	CGeo:       whereHelperstring{field: "\"stations\".\"c_geo\""},
	RGTroncon:  whereHelperint64{field: "\"stations\".\"rg_troncon\""},
	GeoShape:   whereHelperstring{field: "\"stations\".\"geo_shape\""},
	PK:         whereHelperstring{field: "\"stations\".\"pk\""},
	Idreseau:   whereHelperint64{field: "\"stations\".\"idreseau\""},
	Departemen: whereHelperstring{field: "\"stations\".\"departemen\""},
	YL93:       whereHelperfloat64{field: "\"stations\".\"y_l93\""},
	Fret:       whereHelperstring{field: "\"stations\".\"fret\""},
}

// StationRels is where relationship names are stored.
var StationRels = struct {
	Favorites string
}{
	Favorites: "Favorites",
}

// stationR is where relationships are stored.
type stationR struct {
	Favorites FavoriteSlice `boil:"Favorites" json:"Favorites" toml:"Favorites" yaml:"Favorites"`
}

// NewStruct creates a new relationship struct
func (*stationR) NewStruct() *stationR {
	return &stationR{}
}

func (r *stationR) GetFavorites() FavoriteSlice {
	if r == nil {
		return nil
	}
	return r.Favorites
}

// stationL is where Load methods for each relationship are stored.
type stationL struct{}

var (
	stationAllColumns            = []string{"id", "commune", "y_wgs84", "x_wgs84", "libelle", "idgaia", "voyageurs", "geo_point_2d", "code_ligne", "x_l93", "c_geo", "rg_troncon", "geo_shape", "pk", "idreseau", "departemen", "y_l93", "fret"}
	stationColumnsWithoutDefault = []string{"id", "commune", "y_wgs84", "x_wgs84", "libelle", "idgaia", "voyageurs", "geo_point_2d", "code_ligne", "x_l93", "c_geo", "rg_troncon", "geo_shape", "pk", "idreseau", "departemen", "y_l93", "fret"}
	stationColumnsWithDefault    = []string{}
	stationPrimaryKeyColumns     = []string{"id"}
	stationGeneratedColumns      = []string{}
)

type (
	// StationSlice is an alias for a slice of pointers to Station.
	// This should almost always be used instead of []Station.
	StationSlice []*Station
	// StationHook is the signature for custom Station hook methods
	StationHook func(context.Context, boil.ContextExecutor, *Station) error

	stationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stationType                 = reflect.TypeOf(&Station{})
	stationMapping              = queries.MakeStructMapping(stationType)
	stationPrimaryKeyMapping, _ = queries.BindMapping(stationType, stationMapping, stationPrimaryKeyColumns)
	stationInsertCacheMut       sync.RWMutex
	stationInsertCache          = make(map[string]insertCache)
	stationUpdateCacheMut       sync.RWMutex
	stationUpdateCache          = make(map[string]updateCache)
	stationUpsertCacheMut       sync.RWMutex
	stationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stationAfterSelectHooks []StationHook

var stationBeforeInsertHooks []StationHook
var stationAfterInsertHooks []StationHook

var stationBeforeUpdateHooks []StationHook
var stationAfterUpdateHooks []StationHook

var stationBeforeDeleteHooks []StationHook
var stationAfterDeleteHooks []StationHook

var stationBeforeUpsertHooks []StationHook
var stationAfterUpsertHooks []StationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Station) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Station) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Station) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Station) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Station) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Station) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Station) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Station) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Station) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStationHook registers your hook function for all future operations.
func AddStationHook(hookPoint boil.HookPoint, stationHook StationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stationAfterSelectHooks = append(stationAfterSelectHooks, stationHook)
	case boil.BeforeInsertHook:
		stationBeforeInsertHooks = append(stationBeforeInsertHooks, stationHook)
	case boil.AfterInsertHook:
		stationAfterInsertHooks = append(stationAfterInsertHooks, stationHook)
	case boil.BeforeUpdateHook:
		stationBeforeUpdateHooks = append(stationBeforeUpdateHooks, stationHook)
	case boil.AfterUpdateHook:
		stationAfterUpdateHooks = append(stationAfterUpdateHooks, stationHook)
	case boil.BeforeDeleteHook:
		stationBeforeDeleteHooks = append(stationBeforeDeleteHooks, stationHook)
	case boil.AfterDeleteHook:
		stationAfterDeleteHooks = append(stationAfterDeleteHooks, stationHook)
	case boil.BeforeUpsertHook:
		stationBeforeUpsertHooks = append(stationBeforeUpsertHooks, stationHook)
	case boil.AfterUpsertHook:
		stationAfterUpsertHooks = append(stationAfterUpsertHooks, stationHook)
	}
}

// One returns a single station record from the query.
func (q stationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Station, error) {
	o := &Station{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for stations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Station records from the query.
func (q stationQuery) All(ctx context.Context, exec boil.ContextExecutor) (StationSlice, error) {
	var o []*Station

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Station slice")
	}

	if len(stationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Station records in the query.
func (q stationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count stations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if stations exists")
	}

	return count > 0, nil
}

// Favorites retrieves all the favorite's Favorites with an executor.
func (o *Station) Favorites(mods ...qm.QueryMod) favoriteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"favorites\".\"station_id\"=?", o.ID),
	)

	return Favorites(queryMods...)
}

// LoadFavorites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stationL) LoadFavorites(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStation interface{}, mods queries.Applicator) error {
	var slice []*Station
	var object *Station

	if singular {
		var ok bool
		object, ok = maybeStation.(*Station)
		if !ok {
			object = new(Station)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStation))
			}
		}
	} else {
		s, ok := maybeStation.(*[]*Station)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`favorites`),
		qm.WhereIn(`favorites.station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load favorites")
	}

	var resultSlice []*Favorite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice favorites")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on favorites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for favorites")
	}

	if len(favoriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Favorites = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &favoriteR{}
			}
			foreign.R.Station = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StationID {
				local.R.Favorites = append(local.R.Favorites, foreign)
				if foreign.R == nil {
					foreign.R = &favoriteR{}
				}
				foreign.R.Station = local
				break
			}
		}
	}

	return nil
}

// AddFavorites adds the given related objects to the existing relationships
// of the station, optionally inserting them as new records.
// Appends related to o.R.Favorites.
// Sets related.R.Station appropriately.
func (o *Station) AddFavorites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Favorite) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"favorites\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"station_id"}),
				strmangle.WhereClause("\"", "\"", 0, favoritePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.StationID, rel.UserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stationR{
			Favorites: related,
		}
	} else {
		o.R.Favorites = append(o.R.Favorites, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &favoriteR{
				Station: o,
			}
		} else {
			rel.R.Station = o
		}
	}
	return nil
}

// Stations retrieves all the records using an executor.
func Stations(mods ...qm.QueryMod) stationQuery {
	mods = append(mods, qm.From("\"stations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"stations\".*"})
	}

	return stationQuery{q}
}

// FindStation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Station, error) {
	stationObj := &Station{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stations\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from stations")
	}

	if err = stationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return stationObj, err
	}

	return stationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Station) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stationInsertCacheMut.RLock()
	cache, cached := stationInsertCache[key]
	stationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stationAllColumns,
			stationColumnsWithDefault,
			stationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stationType, stationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stationType, stationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into stations")
	}

	if !cached {
		stationInsertCacheMut.Lock()
		stationInsertCache[key] = cache
		stationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Station.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Station) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stationUpdateCacheMut.RLock()
	cache, cached := stationUpdateCache[key]
	stationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stationAllColumns,
			stationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update stations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, stationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stationType, stationMapping, append(wl, stationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update stations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for stations")
	}

	if !cached {
		stationUpdateCacheMut.Lock()
		stationUpdateCache[key] = cache
		stationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for stations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for stations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in station slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all station")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Station) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stationUpsertCacheMut.RLock()
	cache, cached := stationUpsertCache[key]
	stationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stationAllColumns,
			stationColumnsWithDefault,
			stationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stationAllColumns,
			stationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert stations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stationPrimaryKeyColumns))
			copy(conflict, stationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"stations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stationType, stationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stationType, stationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert stations")
	}

	if !cached {
		stationUpsertCacheMut.Lock()
		stationUpsertCache[key] = cache
		stationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Station record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Station) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Station provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stationPrimaryKeyMapping)
	sql := "DELETE FROM \"stations\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from stations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for stations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from station slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stations")
	}

	if len(stationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Station) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stations\".* FROM \"stations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StationSlice")
	}

	*o = slice

	return nil
}

// StationExists checks if the Station row exists.
func StationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stations\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if stations exists")
	}

	return exists, nil
}

// Exists checks if the Station row exists.
func (o *Station) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StationExists(ctx, exec, o.ID)
}
